#!/usr/bin/env python3
"""
Backend API pour IA WebGen Pro
G√®re les recherches d'images et autres APIs s√©curis√©es
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import httpx
import os
from typing import List, Dict, Any
import json

app = FastAPI(title="IA WebGen Pro API")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir les fichiers statiques
app.mount("/static", StaticFiles(directory="../"), name="static")

@app.get("/")
async def serve_index():
    """Servir l'index.html"""
    return FileResponse("../index.html")

@app.get("/api/health")
async def health_check():
    """V√©rification de sant√© de l'API"""
    return {"status": "healthy", "message": "IA WebGen Pro API is running"}

@app.post("/api/images/search")
async def search_images(request: Dict[Any, Any]):
    """
    Recherche d'images via API Unsplash
    """
    try:
        query = request.get("query", "")
        if not query:
            raise HTTPException(status_code=400, detail="Query is required")
        
        # URLs d'images de d√©monstration - dans un vrai projet, utiliser l'API Unsplash
        demo_images = [
            {
                "id": f"demo_{i}",
                "url": f"https://images.unsplash.com/photo-{1571197857330 + i * 1000}?w=400&h=300&fit=crop&q=80",
                "small_url": f"https://images.unsplash.com/photo-{1571197857330 + i * 1000}?w=200&h=150&fit=crop&q=80",
                "description": f"{query} image {i + 1}",
                "alt_description": f"Image de {query}"
            }
            for i in range(6)
        ]
        
        # Images sp√©cifiques selon la requ√™te
        if "restaurant" in query.lower():
            demo_images = [
                {
                    "id": "rest_1",
                    "url": "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop&q=80",
                    "small_url": "https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=200&h=150&fit=crop&q=80",
                    "description": "Restaurant moderne √©l√©gant",
                    "alt_description": "Restaurant moderne"
                },
                {
                    "id": "rest_2", 
                    "url": "https://images.unsplash.com/photo-1571197857330-8894d3da2c3b?w=400&h=300&fit=crop&q=80",
                    "small_url": "https://images.unsplash.com/photo-1571197857330-8894d3da2c3b?w=200&h=150&fit=crop&q=80",
                    "description": "Plats gastronomiques",
                    "alt_description": "Cuisine gastronomique"
                },
                {
                    "id": "rest_3",
                    "url": "https://images.unsplash.com/photo-1559329007-40df8d946775?w=400&h=300&fit=crop&q=80",
                    "small_url": "https://images.unsplash.com/photo-1559329007-40df8d946775?w=200&h=150&fit=crop&q=80",
                    "description": "Ambiance restaurant chaleureuse",
                    "alt_description": "Ambiance restaurant"
                },
                {
                    "id": "rest_4",
                    "url": "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=400&h=300&fit=crop&q=80",
                    "small_url": "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=200&h=150&fit=crop&q=80",
                    "description": "Chef en cuisine",
                    "alt_description": "Chef cuisinier"
                }
            ]
        
        return {
            "success": True,
            "query": query,
            "images": demo_images,
            "total": len(demo_images)
        }
        
    except Exception as e:
        print(f"Erreur recherche d'images: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chat")
async def chat_response(request: Dict[Any, Any]):
    """
    R√©ponses du ChatGPT
    """
    try:
        message = request.get("message", "").lower()
        
        # R√©ponses contextuelles
        if "aide" in message or "help" in message:
            response = {
                "message": """Je peux t'aider avec :
‚Ä¢ <b>/image [description]</b> - Chercher des images
‚Ä¢ Questions sur l'√©dition du site
‚Ä¢ Suggestions d'am√©lioration
‚Ä¢ Conseils de design

Que veux-tu faire ?""",
                "type": "help"
            }
        elif message.startswith("/image"):
            query = message.replace("/image", "").strip()
            response = {
                "message": f"üîç Recherche d'images pour: \"{query}\"...",
                "type": "image_search",
                "query": query
            }
        elif "√©dition" in message or "modifier" in message:
            response = {
                "message": """Pour modifier ton site :
1. Active le <b>Mode √âdition</b> dans le panneau de droite
2. Clique sur n'importe quel √©l√©ment pour le modifier
3. Utilise les boutons d'√©dition qui apparaissent
4. Tu peux changer les textes, couleurs, styles

Veux-tu que j'active le mode √©dition pour toi ?""",
                "type": "edit_help"
            }
        else:
            responses = [
                "C'est une excellente question ! Peux-tu me donner plus de d√©tails ?",
                "Je vois que tu travailles sur ton site. Comment puis-je t'aider √† l'am√©liorer ?",
                "Bonne id√©e ! Pour cela, je recommande d'utiliser le mode √©dition.",
                "Int√©ressant ! N'h√©site pas √† exp√©rimenter avec les couleurs et les styles.",
                "Super ! Si tu veux ajouter du contenu visuel, utilise la commande <b>/image [description]</b>."
            ]
            import random
            response = {
                "message": random.choice(responses),
                "type": "general"
            }
        
        return response
        
    except Exception as e:
        print(f"Erreur chat: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001, reload=True)